name: 'Swagger Coverage'
on:
  workflow_call:
    inputs:
      spec-path:
        description: 'Path to local or URL to remote swagger specification'
        required: true
        type: string
        default: 'swagger.json'
      input-path:
        description: 'Path to folder with generated files with coverage'
        required: true
        type: string
        default: 'swagger-coverage-output'
      use-minimal-config:
        description: 'Use minimal report template'
        required: false
        type: boolean
        default: true
      use-full-config:
        description: 'Use full report template'
        required: false
        type: boolean
        default: true
      quiet:
        description: 'Switch on the quiet mode'
        required: false
        type: boolean
        default: true
      verbose:
        description: 'Switch on the verbose mode'
        required: false
        type: boolean
        default: false
      throw-on-fail:
        description: 'Fail build if the coverage is lower than base'
        required: false
        type: boolean
        default: false

jobs:
  run-swagger-coverage:
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4

      - name: Set globals
        id: globals
        run: |
          echo "BASE_COVERAGE_FILE=coverage-threshold.txt" >> "$GITHUB_ENV"
          echo "RESULTS_COVERAGE_FILE=swagger-coverage-results.json" >> "$GITHUB_ENV"
          echo "COVERAGE_RUN_KEY=coverage-threshold-${{ github.run_id }}" >> "$GITHUB_ENV"
          echo "IS_DEFAULT_BRANCH=$([[ ${{ github.ref_name }} == ${{ github.event.repository.default_branch }} ]] && echo 'true' || echo 'false')" >> "$GITHUB_ENV"

      - name: Copy templates
        run: mv ${{ github.action_path }}/src/swagger-coverage .

      - name: Download swagger-coverage tool
        run: |
          wget https://github.com/dodopizza/qa.tools.swaggercoverage/releases/download/1.5.1/swagger-coverage-commandline-1.5.1.zip
          unzip swagger-coverage-commandline-1.5.1.zip
          mv swagger-coverage-commandline-1.5.1 swagger-coverage-commandline

      - name: Run swagger coverage minimal
        if: inputs.use-minimal-config
        run: |
          ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
          -s ${{ inputs.spec-path }} \
          -i ${{ inputs.input-path }} \
          -c ./swagger-coverage/config.minimal.json \
          ${{ inputs.quiet && '-q' || '' }} ${{ inputs.verbose && '-v' || '' }}

      - name: Run coverage full
        if: inputs.use-full-config
        run: |
          ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
          -s ${{ inputs.spec-path }} \
          -i ${{ inputs.input-path }} \
          -c ./swagger-coverage/config.default.json \
          ${{ inputs.quiet && '-q' || '' }} ${{ inputs.verbose && '-v' || '' }}

      - name: Upload full coverage result
        if: inputs.use-full-config
        uses: actions/upload-artifact@v4
        with:
          name: swagger-coverage-result
          path: swagger-coverage-report.html

      - uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - uses: actions/cache/restore@v4
        id: restore-cache
        with:
          path: ${{ env.BASE_COVERAGE_FILE }}
          key: coverage-threshold

      - id: calculate-threshold
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const baseFile = process.env.BASE_COVERAGE_FILE;
            const resultsFile = process.env.RESULTS_COVERAGE_FILE;

            let threshold = 0;
            let fullPercentage = 0;

            if (fs.existsSync(baseFile)) {
              threshold = parseFloat(fs.readFileSync(baseFile, "utf8")) || 0;
            }
            core.info(`Base threshold: ${threshold}`);

            if (!fs.existsSync(resultsFile)) {
              core.info(`File ${resultsFile} not found!`);
              return;
            }

            const resultsJson = fs.readFileSync(resultsFile, "utf8");
            const resultsContent = JSON.parse(resultsJson);
            const { all, full, party, empty } = resultsContent.coverageOperationMap.counter;

            fullPercentage = Math.round((full/all * 100 + Number.EPSILON) * 100) / 100;

            if (process.env.IS_DEFAULT_BRANCH === 'true') {
              core.info(`Write to ${baseFile} new threshold: ${fullPercentage}`);
              fs.writeFileSync(baseFile, fullPercentage.toString());
            }

            const isPassed = fullPercentage >= threshold;
            const message = isPassed 
              ? `✅ The coverage ${fullPercentage}% is equal or higher than ${threshold}%`
              : `❌ The coverage ${fullPercentage}% is lower than ${threshold}%`;

            core.summary.addRaw(message, true);
            core.summary.write({ overwrite: false });
            core.setOutput('passed', isPassed);
            core.setOutput('message', message);

      - uses: actions/cache/save@v4
        if: ${{ env.IS_DEFAULT_BRANCH == 'true' && steps.restore-cache.outputs.cache-matched-key != env.COVERAGE_RUN_KEY }}
        with:
          path: ${{ env.BASE_COVERAGE_FILE }}
          key: ${{ env.COVERAGE_RUN_KEY }}

      - name: Upload swagger coverage minimal
        if: inputs.use-minimal-config
        run: cat swagger-coverage-report.min.html >> $GITHUB_STEP_SUMMARY

      - name: Coverage validation
        if: inputs.throw-on-fail && steps.calculate-threshold.outputs.passed == 'false'
        run: |
          echo "::error title=Coverage validation failed::${{ steps.calculate-threshold.outputs.message }}"
          exit 1
