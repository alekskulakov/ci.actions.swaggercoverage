name: 'Run swagger-coverage'
description: 'Build coverage report based on swagger specification'
inputs:
  spec-path:
    description: 'Path to local or URL to remote swagger specification'
    required: true
    default: 'swagger.json'
  input-path:
    description: 'Path to folder with generated files with coverage'
    required: true
    default: 'swagger-coverage-output'
  use-minimal-config:
    description: 'Use minimal report template'
    required: false
    default: 'true'
  use-full-config:
    description: 'Use full report template'
    required: false
    default: 'true'
  quiet:
    description: 'Switch on the quiet mode'
    required: false
    default: 'true'
  verbose:
    description: 'Switch on the verbose mode'
    required: false
    default: 'false'
  throw-on-fail:
    description: 'Fail build if the coverage is lower than base'
    required: false
    default: 'false'
  skip-send-to-kusto:
    description: 'Skip ingesting coverage to Kusto'
    required: false
    default: 'false'
  service-name:
    description: 'Service name'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set globals
      id: globals
      shell: bash
      run: |
        service_name="${{ inputs.service-name }}"
        repo_name="${GITHUB_REPOSITORY##*/}"
        fixed_service_name="${service_name:-$repo_name}"
    
        echo "SERVICE_NAME=$service_name" >> "${GITHUB_OUTPUT}"
        echo "SPEC_LOCAL_PATH=./swagger-coverage/${fixed_service_name}.json" >> "${GITHUB_OUTPUT}"
        echo "ARTIFACT_NAME=swagger-coverage-result${service_name:+-$service_name}" >> "${GITHUB_OUTPUT}"
        echo "CACHE_KEY=coverage-threshold${service_name:+-$service_name}" >> "${GITHUB_OUTPUT}"
        echo "BASE_COVERAGE_FILE=coverage-threshold.txt" >> "${GITHUB_OUTPUT}"
        echo "RESULTS_COVERAGE_FILE=swagger-coverage-results.json" >> "${GITHUB_OUTPUT}"
        echo "COVERAGE_RUN_KEY=coverage-threshold-${{ github.run_id }}" >> "${GITHUB_OUTPUT}"
        echo "IS_DEFAULT_BRANCH=${{ (github.head_ref || github.ref_name) == github.event.repository.default_branch }}" >> "${GITHUB_OUTPUT}"

    - name: Copy templates
      shell: bash
      run: cp -r ${{ github.action_path }}/src/. .

    - uses: actions/cache@v4
      id: cache-tool
      with:
        path: swagger-coverage-commandline
        key: swagger-coverage-commandline-1.5.1

    - name: Download swagger-coverage tool
      if: steps.cache-tool.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget https://github.com/dodopizza/qa.tools.swaggercoverage/releases/download/1.5.1/swagger-coverage-commandline-1.5.1.zip
        unzip swagger-coverage-commandline-1.5.1.zip
        mv swagger-coverage-commandline-1.5.1 swagger-coverage-commandline

    - shell: bash
      run: |
        mkdir -p ${{ inputs.input-path }}
        mv ${{ inputs.spec-path }} ${{ steps.globals.outputs.SPEC_LOCAL_PATH }}

    - name: Run swagger coverage minimal
      if: ${{ inputs.use-minimal-config == 'true' }}
      shell: bash
      run: |
        ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
        -s ${{ steps.globals.outputs.SPEC_LOCAL_PATH }} \
        -i ${{ inputs.input-path }} \
        -c ./swagger-coverage/config.minimal.json \
        ${{ inputs.quiet == 'true' && '-q' || ''}} ${{ inputs.verbose == 'true' && '-v' || ''}} 

    - name: Run coverage full
      if: ${{ inputs.use-full-config == 'true'}}
      shell: bash
      run: |
        ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
        -s ${{ steps.globals.outputs.SPEC_LOCAL_PATH }} \
        -i ${{ inputs.input-path }} \
        -c ./swagger-coverage/config.default.json \
        ${{ inputs.quiet == 'true' && '-q' || ''}} ${{ inputs.verbose == 'true' && '-v' || ''}}

    - name: Upload full coverage report
      if: ${{ inputs.use-full-config == 'true'}}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.globals.outputs.ARTIFACT_NAME }}
        path: swagger-coverage-report.html

    - uses: actions/setup-node@v4.2.0
      with:
        node-version: '22.14.0'

    - uses: actions/cache/restore@v4
      id: restore-cache
      with:
        path: ${{ steps.globals.outputs.BASE_COVERAGE_FILE }}
        key: ${{ steps.globals.outputs.CACHE_KEY }}

    - id: calculate-threshold
      uses: actions/github-script@v7
      with:
        github-token: '${{ github.token }}'
        script: |
          const fs = require('fs');

          const baseFile = '${{ steps.globals.outputs.BASE_COVERAGE_FILE }}'
          const resultsFile = '${{ steps.globals.outputs.RESULTS_COVERAGE_FILE }}';

          let threshold = 0;
          let newCoverage = 0;
          if (!fs.existsSync(baseFile)) {
            core.info(`File ${baseFile} not found!`);
          } else {
            try {
              threshold = fs.readFileSync(baseFile, "utf8");
            }
            catch(err) {
              core.info(`Failed to get the base threshold value:`);
              core.info(err.message);
            }
          }
          core.info(`Base threshold: ${threshold}`);

          if (!fs.existsSync(resultsFile)) {
            core.info(`File ${resultsFile} not found!`);
          } else {
            try {
              const resultsJson = fs.readFileSync(resultsFile, "utf8");
              const resultsContent = JSON.parse(resultsJson);
              const {all, empty} = resultsContent.coverageOperationMap.counter;
          
              newCoverage = Math.round(((all-empty)/all*100 + Number.EPSILON) * 100) / 100;
            }
            catch(err) {
              core.info(`Failed to calculate current coverage:`);
              core.info(err.message);
            }
          }

          const isChanged = newCoverage != threshold;
          if (isChanged) {
            console.log(`The coverage changed from ${threshold} to ${newCoverage}`);
          } else {
            console.log("The coverage didn't change.");
          }

          if(${{ steps.globals.outputs.IS_DEFAULT_BRANCH }} && isChanged) {
            core.info(`Write to ${baseFile} new threshold: ${newCoverage}`);
            try {
              fs.writeFileSync(baseFile, newCoverage.toString());
            }
            catch(err) {
              core.info(`Failed to save new threshold:`);
              core.info(err.message);
            }
          }

          const isPassed = newCoverage >= threshold;
          const failMsg = `❌ The coverage ${newCoverage}% is too low (threshold: ${threshold}%)`;
          const successMsg = `✅ The coverage ${newCoverage}% is OK (threshold: ${threshold}%)`;
          const message = isPassed ? successMsg : failMsg;
          
          const serviceName = core.getInput('service-name');
          if (serviceName) {
            await core.summary.addRaw(`${serviceName}:`, true);
          }
          core.summary.addRaw(message, true);
          core.summary.write({overwrite: false});
          core.setOutput('passed', isPassed);
          core.setOutput('message', message);
          core.setOutput('coverage', newCoverage);
          core.setOutput('coverage-changed', isChanged);

    - uses: actions/cache/save@v4
      if: ${{ steps.globals.outputs.IS_DEFAULT_BRANCH == 'true'
        && steps.calculate-threshold.outputs.coverage-changed == 'true'
        && steps.restore-cache.outputs.cache-matched-key != steps.globals.outputs.COVERAGE_RUN_KEY }}
      with:
        path: ${{ steps.globals.outputs.BASE_COVERAGE_FILE }}
        key: ${{ steps.globals.outputs.COVERAGE_RUN_KEY }}

    - name: Upload swagger coverage minimal
      if: ${{ inputs.use-minimal-config == 'true' }}
      shell: bash
      run: cat swagger-coverage-report.min.html >> $GITHUB_STEP_SUMMARY

    - name: Save coverage to Kusto
      if: ${{ inputs.skip-send-to-kusto != 'true'
        && steps.calculate-threshold.outputs.coverage-changed == 'true'
        && steps.globals.outputs.IS_DEFAULT_BRANCH == 'true' }}
      shell: bash
      continue-on-error: true
      run: |
        npm install azure-kusto-data@6.0.3 azure-kusto-ingest@6.0.3
        node ingestData.js "${{ github.repository }}" "${{ steps.calculate-threshold.outputs.coverage }}" "${{ github.run_id }}"

    - name: Coverage validation
      if: ${{ inputs.throw-on-fail == 'true'
        && steps.calculate-threshold.outputs.passed == 'false'
        && steps.globals.outputs.IS_DEFAULT_BRANCH == 'false' }}
      shell: bash
      run: |
        title='Coverage validation failed'
        message='${{ steps.calculate-threshold.outputs.message }}'
        echo "::error title=${title}::${message}"
        exit 1