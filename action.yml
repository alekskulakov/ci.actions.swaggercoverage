name: 'Run swagger-coverage'
description: 'Build coverage report based on swagger specification'
inputs:
  spec-path:
    description: 'Path to local or URL to remote swagger specification'
    required: true
    default: 'swagger.json'
  input-path:
    description: 'Path to folder with generated files with coverage'
    required: true
    default: 'swagger-coverage-output'
  use-minimal-config:
    description: 'Use minimal report template'
    required: false
    default: true
  use-full-config:
    description: 'Use full report template'
    required: false
    default: true
  quiet:
    description: 'Switch on the quiet mode'
    required: false
    default: true
  verbose:
    description: 'Switch on the verbose mode'
    required: false
    default: false
  throw-on-fail:
    description: 'Fail build if the coverage is lower than base'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Set globals
      id: globals
      shell: bash
      run: |
        echo "BASE_COVERAGE_FILE=coverage-threshold.txt" >> "${GITHUB_OUTPUT}"
        echo "RESULTS_COVERAGE_FILE=swagger-coverage-results.json" >> "${GITHUB_OUTPUT}"
        echo "COVERAGE_RUN_KEY=coverage-threshold-${{ github.run_id }}" >> "${GITHUB_OUTPUT}"
        echo "IS_DEFAULT_BRANCH=${{ (github.head_ref || github.ref_name) == github.event.repository.default_branch }}" >> "${GITHUB_OUTPUT}"

    - name: Copy templates
      shell: bash
      run: mv ${{ github.action_path }}/src/swagger-coverage .

    - uses: actions/cache@v4
      id: cache-tool
      with:
        path: swagger-coverage-commandline
        key: swagger-coverage-commandline-1.5.1

    - name: Download swagger-coverage tool
      if: steps.cache-tool.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget https://github.com/dodopizza/qa.tools.swaggercoverage/releases/download/1.5.1/swagger-coverage-commandline-1.5.1.zip
        unzip swagger-coverage-commandline-1.5.1.zip
        mv swagger-coverage-commandline-1.5.1 swagger-coverage-commandline
    - shell: bash
      run: mkdir -p ${{ inputs.spec-path }}
    - name: Run swagger coverage minimal
      if: ${{ inputs.use-minimal-config }}
      shell: bash
      run: |
        ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
        -s ${{ inputs.spec-path }} \
        -i ${{ inputs.input-path }} \
        -c ./swagger-coverage/config.minimal.json \
        ${{ inputs.quiet == 'true' && '-q' || ''}} ${{ inputs.verbose == 'true' && '-v' || ''}} 

    - name: Run coverage full
      if: ${{ inputs.use-full-config }}
      shell: bash
      run: |
        ./swagger-coverage-commandline/bin/swagger-coverage-commandline \
        -s ${{ inputs.spec-path }} \
        -i ${{ inputs.input-path }} \
        -c ./swagger-coverage/config.default.json \
        ${{ inputs.quiet == 'true' && '-q' || ''}} ${{ inputs.verbose == 'true' && '-v' || ''}}

    - name: Upload full coverage result
      if: ${{ inputs.use-full-config }}
      uses: actions/upload-artifact@v4
      with:
        name: swagger-coverage-result
        path: swagger-coverage-report.html
          
    - uses: actions/setup-node@v4
      with:
        node-version: '22.14.0'

    - uses: actions/cache/restore@v4
      id: restore-cache
      with: 
        path: ${{ steps.globals.outputs.BASE_COVERAGE_FILE }}
        key: coverage-threshold

    - id: calculate-threshold  
      uses: actions/github-script@v7
      with:
        github-token: '${{ github.token }}'
        script: |
          const fs = require('fs');

          const baseFile = '${{ steps.globals.outputs.BASE_COVERAGE_FILE }}'
          const resultsFile = '${{ steps.globals.outputs.RESULTS_COVERAGE_FILE }}';

          let threshold = 0;
          let fullPercentage = 0;
          if (!fs.existsSync(baseFile)) {
            core.info(`File ${baseFile} not found!`);
          } else {
            threshold = fs.readFileSync(baseFile, "utf8");
          }
          core.info(`Base threshold: ${threshold}`);

          if (!fs.existsSync(resultsFile)) {
            core.info(`File ${resultsFile} not found!`);
            return;
          }

          const resultsJson = fs.readFileSync(resultsFile, "utf8");
          const resultsContent = JSON.parse(resultsJson);
          const {all, full, party, empty} = resultsContent.coverageOperationMap.counter;

          fullPercentage = Math.round((full/all*100 + Number.EPSILON) * 100) / 100;
          let partialPercentage = Math.round((party/all*100 + Number.EPSILON) * 100) / 100;
          let emptyPercentage = Math.round((empty/all*100 + Number.EPSILON) * 100) / 100;

          if(${{ steps.globals.outputs.IS_DEFAULT_BRANCH }}) {
            core.info(`Write to ${baseFile} new threshold: ${fullPercentage}`);
            fs.writeFileSync(baseFile, fullPercentage.toString());
          }

          const isPassed = fullPercentage >= threshold;
          const failMsg = `:x: The coverage ${fullPercentage}% is lower than ${threshold}%`;
          const successMsg = `:white_check_mark: The coverage ${fullPercentage}% is equal or higher than ${threshold}%`;
          const message = isPassed ? successMsg : failMsg;
          core.summary.addRaw(message, true);
          core.summary.write({overwrite: false});
          core.setOutput('passed', isPassed);
          core.setOutput('message', message);

    - uses: actions/cache/save@v4
      if: ${{ steps.globals.outputs.IS_DEFAULT_BRANCH == 'true' 
        && steps.restore-cache.outputs.cache-matched-key != steps.globals.outputs.COVERAGE_RUN_KEY }}
      with:
        path: ${{ steps.globals.outputs.BASE_COVERAGE_FILE }}
        key: ${{ steps.globals.outputs.COVERAGE_RUN_KEY }}
    
    - name: Upload swagger coverage minimal
      if: ${{ inputs.use-minimal-config }}
      shell: bash
      run: cat swagger-coverage-report.min.html >> $GITHUB_STEP_SUMMARY

    - name: Coverage validation
      if: ${{ (inputs.throw-on-fail == 'true') 
        && (steps.calculate-threshold.outputs.passed == 'false') }}
      shell: bash
      run: |
        title='Coverage validation failed'
        message='${{ steps.calculate-threshold.outputs.message }}'
        echo "::error title=${title}::${message}"
        exit 1